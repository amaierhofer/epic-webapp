- title "Epic Architecture"

%p To get a quick overview of EPIC and the ideas behind it, you might want to watch the following presentation!

<div class="prezi-player"><style type="text/css" media="screen">.prezi-player { width: 800px; } .prezi-player-links { text-align: center; }</style><object id="prezi_xr2gtlyatqe6" name="prezi_xr2gtlyatqe6" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="800" height="400"><param name="movie" value="http://prezi.com/bin/preziloader.swf"/><param name="allowfullscreen" value="true"/><param name="allowscriptaccess" value="always"/><param name="bgcolor" value="#ffffff"/><param name="flashvars" value="prezi_id=xr2gtlyatqe6&amp;lock_to_path=0&amp;color=ffffff&amp;autoplay=no&amp;autohide_ctrls=0"/><embed id="preziEmbed_xr2gtlyatqe6" name="preziEmbed_xr2gtlyatqe6" src="http://prezi.com/bin/preziloader.swf" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="800" height="400" bgcolor="#ffffff" flashvars="prezi_id=xr2gtlyatqe6&amp;lock_to_path=0&amp;color=ffffff&amp;autoplay=no&amp;autohide_ctrls=0"></embed></object><div class="prezi-player-links"><p><a title="This presentation is about EPIC - the easy protocol for item control. It describes EPIC, and how to extend it!" href="http://prezi.com/xr2gtlyatqe6/epic-easy-protocol-for-item-control/">EPIC - Easy Protocol for Item Control</a> on <a href="http://prezi.com">Prezi</a></p></div></div>

:maruku
  ##Epic Service

  The EPIC Architecture consists of the EPIC service that runs on an internet connected device, and an XMPP server that handles the message exchange of multiple connected devices.

  The EPIC Service allows other applications to connect to it. It abstracts from the complexities involved in the underlying message oriented middle-ware (i.e., XMPP) and the operating system.
  With the EPIC Architecture messages are exchanged between application nodes that are part of the same application.
  The application decides which type of messages are sent between different application nodes.
  After initialization of the application (i.e., binding of the application to the service and initialization of all application nodes) messages are sent between the different peers.

  The EPIC architecture consists of a service that is running on a device, managing the communication with the EPIC network, and an XMPP server. The EPIC acts as a middleman between applications and the XMPP server. We found a couple of good reasons why the EPIC architecture is beneficial for application developers, and users:

    *  Limited resources: The EPIC architecture is built to run on very different devices. Each EPIC service (respectively XMPP client) requires one long lived TCP connection. While it is probably okay for a desktop computer to run one XMPP connection for each application, it is unacceptable for devices with limited resources (e.g., smartphones, embeded systems, etc.). So there is clearly a need for one component running on the smartphone, that handles this stuff.

    *  Decentralization: If there is only one component running on the device that enables several internet-of-things applications - this component must not be controlled by one big company, but rather by a community of developers working on an open source project. If it was controlled by one company, this company would be in control of the whole internet-of-things.

    *  Trust: The EPIC architecture enables applications to perform actions relevant to the users security and privacy. A sensible user will not allow every application to access her EPIC network since this allows full control over all connected devices. To allow an application access to the network the user needs to trust the company that deploys the application. For small (and therefore unknown) companies this is infeasible. A sensible user can however trust a implementation of a EPIC service that is open source software and supported by a large community. Third party applications are only granted temporary access to the service which lets them still perform all actions on the behalf of the user but gives the user better control over the permissions of each applications.


  ##Implementation

  As we said its easy and based on XMPP. That means you can use any XMPP library to implement your own EPIC service. Basically your service needs to filter for messages that contain an application element of namespace:
  TODO

  Implementing your own EPIC service boils down to parsing the data contained in the application element and start the execution of the appropriate action.

  The application element has the attributes:
  TODO
  The application element MUST contain a session id that
  The application element MAY contain several children, that describe the data that shall be passed to the application.
  The children must all be of the form
  TODO


  The service starts TODO


  ##Message Exchange

  Messages are exchanged TODO



